---
import type { AstroGlobal } from 'astro';

interface MenuLink {
  text: string;
  url: string;
}

interface NavbarProps {
  desktopMenu: MenuLink[];
  mobileMenu: MenuLink[];
}

const { desktopMenu = [], mobileMenu = [] } = Astro.props as NavbarProps;

// Get current pathname from Astro.url
const currentPath = (Astro.url as URL).pathname;

/**
 * Returns true if the menu link matches the current path.
 * @param linkUrl - The URL of the menu link.
 * @param path - The current pathname.
 */
const isActive = (linkUrl: string, path: string): boolean =>
  linkUrl === path || (linkUrl !== '/' && path.startsWith(linkUrl));
---

<!-- Penguin UI Navbar component - Navbar with call to action -->
<nav
  x-data="{ mobileMenuIsOpen: false }"
  x-on:click.away="mobileMenuIsOpen = false"
  class="flex items-center justify-between px-6 py-4"
  aria-label="penguin ui menu"
>
  <!-- Brand Logo -->
  <a
    href="/"
    class="text-on-surface-strong dark:text-on-surface-dark-strong text-2xl font-bold"
  >
    <span>Peng<span class="text-primary dark:text-primary-dark">ui</span>n</span
    >
  </a>
  <!-- Desktop Menu -->
  <ul class="hidden items-center gap-4 sm:flex">
    {
      desktopMenu.map(({ text, url }) => (
        <li>
          <a
            href={url}
            class={`${
              isActive(url, currentPath)
                ? 'text-primary hover:text-primary dark:text-primary-dark dark:hover:text-primary-dark font-bold'
                : 'text-on-surface hover:text-primary dark:text-on-surface-dark dark:hover:text-primary-dark font-medium'
            } underline-offset-2 focus:underline focus:outline-hidden`}
            aria-current={isActive(url, currentPath) ? 'page' : undefined}
          >
            {text}
          </a>
        </li>
      ))
    }
  </ul>
  <!-- Mobile Menu Button -->
  <button
    x-on:click="mobileMenuIsOpen = !mobileMenuIsOpen"
    x-bind:aria-expanded="mobileMenuIsOpen"
    x-bind:class="mobileMenuIsOpen ? 'fixed top-6 right-6 z-20' : null"
    type="button"
    class="text-on-surface dark:text-on-surface-dark flex sm:hidden"
    aria-label="mobile menu"
    aria-controls="mobileMenu"
  >
    <svg
      x-cloak
      x-show="!mobileMenuIsOpen"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      aria-hidden="true"
      viewBox="0 0 24 24"
      stroke-width="2"
      stroke="currentColor"
      class="size-6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
    </svg>
    <svg
      x-cloak
      x-show="mobileMenuIsOpen"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      aria-hidden="true"
      viewBox="0 0 24 24"
      stroke-width="2"
      stroke="currentColor"
      class="size-6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M6 18 18 6M6 6l12 12"></path>
    </svg>
  </button>
  <!-- Mobile Menu -->
  <ul
    x-cloak
    x-show="mobileMenuIsOpen"
    x-transition:enter="transition motion-reduce:transition-none ease-out duration-300"
    x-transition:enter-start="-translate-y-full"
    x-transition:enter-end="translate-y-0"
    x-transition:leave="transition motion-reduce:transition-none ease-out duration-300"
    x-transition:leave-start="translate-y-0"
    x-transition:leave-end="-translate-y-full"
    id="mobileMenu"
    class="divide-outline rounded-b-radius border-outline bg-surface-alt dark:divide-outline-dark dark:border-outline-dark dark:bg-surface-dark-alt fixed inset-x-0 top-0 z-10 flex max-h-svh flex-col divide-y overflow-y-auto border-b px-6 pt-20 pb-6 sm:hidden"
  >
    {
      mobileMenu.map(({ text, url }) => (
        <li class="py-4">
          <a
            href={url}
            class={`${
              isActive(url, currentPath)
                ? 'text-primary dark:text-primary-dark w-full text-lg font-bold'
                : 'text-on-surface dark:text-on-surface-dark w-full text-lg font-medium'
            } focus:underline`}
            aria-current={isActive(url, currentPath) ? 'page' : undefined}
          >
            {text}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

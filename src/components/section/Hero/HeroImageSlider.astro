---
import type { HTMLAttributes } from 'astro/types';

interface Slide {
  imgSrc: string;
  imgAlt: string;
  title: string;
  description: string;
}

interface SliderSettings {
  autoplayIntervalTime?: number;
  showNavButtons?: boolean;
  showIndicators?: boolean;
  showPlayPauseButton?: boolean;
}

interface Props extends HTMLAttributes<'div'> {
  slides: Slide[];
  settings?: SliderSettings;
}

const { slides, settings = {}, ...rest } = Astro.props;

const defaultSettings: Required<SliderSettings> = {
  autoplayIntervalTime: 4000,
  showNavButtons: true,
  showIndicators: true,
  showPlayPauseButton: true,
};

const currentSettings = {
  ...defaultSettings,
  ...settings,
};
---

<section class="bg-black">
  <div
    x-data={`{
    // Sets the time between each slides in milliseconds
    autoplayIntervalTime: ${currentSettings.autoplayIntervalTime},
    slides: ${JSON.stringify(slides)},
    currentSlideIndex: 1,
    isPaused: false,
    autoplayInterval: null,
    showNavButtons: ${currentSettings.showNavButtons},
    showIndicators: ${currentSettings.showIndicators},
    showPlayPauseButton: ${currentSettings.showPlayPauseButton},
    previous() {                
        if (this.currentSlideIndex > 1) {                    
            this.currentSlideIndex = this.currentSlideIndex - 1                
        } else {   
            // If it's the first slide, go to the last slide           
            this.currentSlideIndex = this.slides.length                
        }
        this.setAutoplayInterval(this.autoplayIntervalTime);            
    },            
    next() {                
        if (this.currentSlideIndex < this.slides.length) {                    
            this.currentSlideIndex = this.currentSlideIndex + 1                
        } else {                 
            // If it's the last slide, go to the first slide    
            this.currentSlideIndex = 1                
        }
        this.setAutoplayInterval(this.autoplayIntervalTime);            
    },    
    autoplay() {
        this.autoplayInterval = setInterval(() => {
            if (!this.isPaused) {
                this.next()
            }
        }, this.autoplayIntervalTime)
    },
    // Updates interval time   
    setAutoplayInterval(newIntervalTime) {
        clearInterval(this.autoplayInterval)
        this.autoplayIntervalTime = newIntervalTime
        this.autoplay()
    }
  }`}
    x-init="autoplay()"
    class="relative w-full overflow-hidden"
    {...rest}
  >
    <!-- previous button -->
    <template x-if="showNavButtons">
      <button
        type="button"
        class="focus-visible:outline-primary-dark absolute top-1/2 left-5 z-20 flex -translate-y-1/2 items-center justify-center rounded-full bg-black/40 p-2 text-white transition hover:bg-black/60 focus-visible:outline-2 focus-visible:outline-offset-2 active:outline-offset-0"
        aria-label="previous slide"
        x-on:click="previous()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          stroke="currentColor"
          fill="none"
          stroke-width="3"
          class="size-5 pr-0.5 md:size-6"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M15.75 19.5 8.25 12l7.5-7.5"></path>
        </svg>
      </button>
    </template>

    <!-- next button -->
    <template x-if="showNavButtons">
      <button
        type="button"
        class="focus-visible:outline-primary-dark absolute top-1/2 right-5 z-20 flex -translate-y-1/2 items-center justify-center rounded-full bg-black/40 p-2 text-white transition hover:bg-black/60 focus-visible:outline-2 focus-visible:outline-offset-2 active:outline-offset-0"
        aria-label="next slide"
        x-on:click="next()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          stroke="currentColor"
          fill="none"
          stroke-width="3"
          class="size-5 pl-0.5 md:size-6"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
        </svg>
      </button>
    </template>

    <!-- slides -->
    <!-- Change min-h-[50svh] to your preferred height size -->
    <div class="relative min-h-[50svh] w-full">
      <template x-for="(slide, index) in slides" :key="index">
        <div
          x-cloak
          x-show="currentSlideIndex == index + 1"
          class="absolute inset-0"
          x-transition.opacity.duration.1000ms
        >
          <!-- Title and description -->
          <div
            class="absolute inset-0 z-10 flex flex-col items-center justify-end gap-2 bg-linear-to-t from-black/85 to-transparent px-16 py-12 text-center lg:px-32 lg:py-14"
          >
            <h3
              class="w-full text-2xl font-bold text-balance text-white lg:w-[80%] lg:text-3xl"
              x-text="slide.title"
              x-bind:aria-describedby="'slide' + (index + 1) + 'Description'"
            >
            </h3>
            <p
              class="w-full text-sm text-pretty text-white lg:w-1/2"
              x-text="slide.description"
              x-bind:id="'slide' + (index + 1) + 'Description'"
            >
            </p>
          </div>

          <img
            class="absolute inset-0 h-full w-full object-cover text-black dark:text-white"
            x-bind:src="slide.imgSrc"
            x-bind:alt="slide.imgAlt"
          />
        </div>
      </template>
    </div>

    <!-- Pause/Play Button -->
    <template x-if="showPlayPauseButton">
      <button
        type="button"
        class="focus-visible:outline-primary-dark absolute right-5 bottom-5 z-20 rounded-full text-white opacity-50 transition hover:opacity-80 focus-visible:opacity-80 focus-visible:outline-2 focus-visible:outline-offset-2 active:outline-offset-0"
        aria-label="pause carousel"
        x-on:click="(isPaused = !isPaused), setAutoplayInterval(autoplayIntervalTime)"
        x-bind:aria-pressed="isPaused"
      >
        <svg
          x-cloak
          x-show="isPaused"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
          class="size-7"
        >
          <path
            fill-rule="evenodd"
            d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm6.39-2.908a.75.75 0 0 1 .766.027l3.5 2.25a.75.75 0 0 1 0 1.262l-3.5 2.25A.75.75 0 0 1 8 12.25v-4.5a.75.75 0 0 1 .39-.658Z"
            clip-rule="evenodd"
          >
          </path>
        </svg>
        <svg
          x-cloak
          x-show="!isPaused"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
          class="size-7"
        >
          <path
            fill-rule="evenodd"
            d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm5-2.25A.75.75 0 0 1 7.75 7h.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1-.75-.75v-4.5Zm4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1-.75-.75v-4.5Z"
            clip-rule="evenodd"
          >
          </path>
        </svg>
      </button>
    </template>

    <!-- indicators -->
    <template x-if="showIndicators">
      <div
        class="rounded-radius absolute bottom-3 left-1/2 z-20 flex -translate-x-1/2 gap-4 px-1.5 py-1 md:bottom-5 md:gap-3 md:px-2"
        role="group"
        aria-label="slides"
      >
        <template x-for="(slide, index) in slides" :key="index">
          <button
            type="button"
            class="size-2 rounded-full transition"
            x-on:click="(currentSlideIndex = index + 1), setAutoplayInterval(autoplayIntervalTime)"
            x-bind:class="[currentSlideIndex === index + 1 ? 'bg-white/80' : 'bg-white/40']"
            x-bind:aria-label="'slide ' + (index + 1)"></button>
        </template>
      </div>
    </template>
  </div>
</section>
